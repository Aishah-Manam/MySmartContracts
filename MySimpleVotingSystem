// Programmer: Aishah Manam
// Project: Simple Blockchain Based Voting System
// Website: 
//"SPDX-License-Identifier: GPL3+"

pragma solidity ^0.7.6;

contract Voting {
    
    event castedVote(address indexed Address, uint256 indexed Time);
    
    uint256 private totalVotes;
    uint256 private timeStart;
    uint256 private timeEnd;
    
    // for Debug (D)
    address private candidate_A;
    address private candidate_B;
    
    struct voter {
        string name;
        uint128 memberIC;
        uint128 memberID;
        bool voteCasted;  // true = summited vote, false = not submit yet.
    }
    
    struct candidate {
        string name;
        uint128 memberIC;
        uint128 memberID;
        uint256 candidateTotalVotes;
    }
    
    mapping (address => voter) private myVoter;
    mapping (address => candidate) private myCandidate;
    
    modifier timeLimit {
        if(block.timestamp >= timeStart && block.timestamp <=timeEnd) {
            _;
        } else
            revert("Voting Session is Closed.");
    }
    
    constructor () {
        totalVotes = 0;
        // Voting starts as soon as contract is deployed in blockchain
        timeStart = block.timestamp; 

        //Voting Ends after 60 seconds
        timeEnd = timeStart + 60;  
        
        // This section for Debug (D)
        candidate_A = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4; // Address Remix Ide
        candidate_B = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2; // Address Remix Ide
        setAllVoters();
        setAllCandidates();
    }
    
    function addVoter(string memory newName, uint128 newMemberIC, uint128 newMemberID)
        public {
        myVoter[msg.sender].name = newName;
        myVoter[msg.sender].memberIC = newMemberIC;
        myVoter[msg.sender].memberID = newMemberID;
        myVoter[msg.sender].voteCasted = false;
    }
        
    function setVote() public {
        if(myVoter[msg.sender].voteCasted == false){
            totalVotes = totalVotes + 1;
            myVoter[msg.sender].voteCasted = true;
        }
    }
        
    function getTotalVotes() public view returns (uint256) {
        return totalVotes;
    }
    
    function getTotalCandidateVotes(address newAddress) public view returns (uint256) {
        return (myCandidate[newAddress].candidateTotalVotes);
    }
    
    
    // Debug functions
    function setVoter(address newAddress, string memory newName, uint128 newMemberIC, 
        uint128 newMemberID) public {
        myVoter[newAddress].name = newName;
        myVoter[newAddress].memberIC = newMemberIC;
        myVoter[newAddress].memberID = newMemberID;
        myVoter[newAddress].voteCasted = false;
    }
    
    function setAllVoters() public {
        setVoter(candidate_A, "V1", 11, 11); // voter 1 & CandidateA, Address JavaScript VM
        setVoter(candidate_B, "V2", 22, 22); // voter 2 & CandidateB, Address JavaScript VM
        setVoter(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB, "V3", 33, 33); // voter 3, Address JavaScript VM
        setVoter(0x617F2E2fD72FD9D5503197092aC168c91465E7f2, "V4", 44, 44); // voter 4, Address JavaScript VM
        setVoter(0x17F6AD8Ef982297579C203069C1DbfFE4348c372, "V5", 55, 55); // voter 5, Address JavaScript VM
        setVoter(0x5c6B0f7Bf3E7ce046039Bd8FABdfD3f9F5021678, "V6", 66, 66); // voter 6, Address JavaScript VM
    }
    
    function addCandidate(address newAddress, string memory newName, uint128 newMemberIC, uint128 newMemberID)
        public {
        myCandidate[newAddress].name = newName;
        myCandidate[newAddress].memberIC = newMemberIC;
        myCandidate[newAddress].memberID = newMemberID;
        myCandidate[newAddress].candidateTotalVotes = 0;
    }
    
    function setAllCandidates() public {
        addCandidate(candidate_A, "Candidate_A", 11, 11); 
        addCandidate(candidate_B, "Candidate_B", 22, 22);
    }
    
    function chooseFirstCandidate() public timeLimit {
        if(myVoter[msg.sender].voteCasted == false){
            totalVotes = totalVotes + 1;
            myCandidate[candidate_A].candidateTotalVotes = myCandidate[candidate_A].candidateTotalVotes + 1;
            myVoter[msg.sender].voteCasted = true;
            
            emit castedVote(msg.sender, block.timestamp);
        }
    }
    
    function chooseSecondCandidate() public timeLimit {
        if(myVoter[msg.sender].voteCasted == false){
            totalVotes = totalVotes + 1;
            myCandidate[candidate_B].candidateTotalVotes = myCandidate[candidate_B].candidateTotalVotes + 1;
            myVoter[msg.sender].voteCasted = true;
            
            emit castedVote(msg.sender, block.timestamp);
        }
    }
    
    function getTotalCandidateVotes() public view returns (uint256, uint256) {
        return (myCandidate[candidate_A].
                    candidateTotalVotes, myCandidate[candidate_B].
                    candidateTotalVotes);
    }
}
